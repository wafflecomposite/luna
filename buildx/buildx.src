script_name = "buildx"
script_version = "0"
shell = get_shell
host = shell.host_computer

txt = {}
txt.newline = char(10)

error = function(text)
	print(script_name + ": <color=red>" + text)
end function
warn = function(text)
	print(script_name + ": <color=yellow>" + text)
end function
success = function(text)
	print(script_name + ": <color=green>" + text)
end function
info = function(text)
	print(script_name + ": " + text)
end function
crash = function(text)
	exit(script_name + ": <color=red>" + text)
end function

get_folder = function(start_from, folder_path, create=0)
	current_folder = start_from
	target_folder_list = folder_path.split("/")
	for target_folder in target_folder_list
		folder_found = 0
		if target_folder == null or target_folder == "" then continue
		for folder in current_folder.get_folders
			if folder.name == target_folder then 
				current_folder = folder
				folder_found = 1
			end if
		end for
		if folder_found == 0 then
			if create == 0 then
				error("Can't find folder '" + target_folder + "' in path '" + current_folder.path + "'")
				return null
			else
				cf = host.create_folder(current_folder.path, target_folder)
				if cf != 1 then
					error("Unable to create folder '" + target_folder + "' in path '" + current_folder.path + "'")
					return null
				else
					current_folder = get_folder(current_folder, target_folder)
				end if
			end if
		end if
	end for
	return current_folder
end function

get_file = function(start_from, file_path, create=0)
	current_folder = start_from
	target_folder_list = file_path.split("/")
	filename = target_folder_list.pop
	for target_folder in target_folder_list
		folder_found = 0
		if target_folder == null or target_folder == "" then continue
		for folder in current_folder.get_folders
			if folder.name == target_folder then 
				current_folder = folder
				folder_found = 1
			end if
		end for
		if folder_found == 0 then return null
	end for
	gf_runs = 0
	while gf_runs != 2
		for file in current_folder.get_files
			if file.name == filename then 
				return file
			end if
		end for
		if create == 1 then host.touch(current_folder.path, filename) else break
		gf_runs = gf_runs + 1
	end while
	return null
end function

root_dir = host.File("/")
current_dir = host.File(host.current_path)

luna_dir = get_folder(root_dir, "luna", 1)
luna_lib_dir = get_folder(luna_dir, "lib", 1)
precompile_dir = get_folder(current_dir, "precompiled", 1)

script_path = null
build_target_path = current_dir.path

if params.len >= 1 then script_path = params[0]
if params.len == 2 then build_target_path = params[1]
if params.len < 1 or params.len > 2 then crash("Wrong number of args")

script = get_file(current_dir, script_path)
if script == null then script = get_file(root_dir, script_path)
if script == null then crash("Can't find " + script_path)

precompiler = {}
precompiler.per_char_flow = function(script_text)
	q = char(34) //"
	s = char(59) //;
	b = char(92) //\
	d = "/"
	cleaned_nocomments = ""
	cleaned = ""
	cur_str = 0
	cur_comment = 0
	for chr in script_text.values
		if chr == q then 
			if cur_str == 0 and cur_comment <= 1 then cur_str = 1 else cur_str = 0
			if cur_comment == 1 then
				cur_comment = 0
				cleaned_nocomments = cleaned_nocomments + d + chr
			else if cur_comment == 0 then
				cleaned_nocomments = cleaned_nocomments + chr
			end if
		else if chr == d then 
			cur_comment = cur_comment + 1
		else
			if cur_comment == 1 then
				cur_comment = 0
				cleaned_nocomments = cleaned_nocomments + d + chr
			else if cur_comment >= 2 then
				if chr == txt.newline then 
					cur_comment = 0
					cleaned_nocomments = cleaned_nocomments + chr
				end if
			else
				cleaned_nocomments = cleaned_nocomments + chr
			end if
		end if
	end for
	//there is a glitch. Remove comments first.
	for chr in cleaned_nocomments.values
		if chr == q then 
			if cur_str == 0 then cur_str = 1 else cur_str = 0
			cleaned = cleaned + chr
		else if chr == s and cur_str == 0 then
			cleaned = cleaned + txt.newline
		else if chr == b and cur_str == 0 then
			cleaned = cleaned + txt.newline
		else
			cleaned = cleaned + chr
		end if
	end for
	return cleaned
end function
precompiler.per_string_flow = function(script_text)
	cleaned = ""
	for line in script_text.split(txt.newline)
		clean_line = line.trim
		if clean_line != "" then 
			if cleaned == "" then cleaned = clean_line else cleaned = cleaned + txt.newline + clean_line
		end if
	end for
	return cleaned
end function
precompiler.run = function(script)
	script_filename = script.path.split("/").pop
	script_hashname = script_filename + ".md5"
	script_pcname = script_filename + ".pc"
	script_hash = get_file(precompile_dir, script_hashname, 1)
	script_pc = get_file(precompile_dir, script_pcname, 1)
	if script_hash.content != md5(script.content) then
		info(script_filename + " - changed. Precompiling...")
		precompiled = self.per_char_flow(script.content)
		precompiled = self.per_string_flow(precompiled)
		script_pc.set_content(precompiled)
		script_hash.set_content(md5(script.content))
	else
		info(script_filename + " - not changed.")
	end if
end function

precompiler.run(script)

info("Script path: " + script.path)
info("Target path: " + build_target_path)
info("Building...")
build_result = shell.build(script.path, build_target_path)
if build_result == "" then
	info("Done!")
else
	error("Build failed: " + build_result)
end if
print(program_path)
print("\".code)

